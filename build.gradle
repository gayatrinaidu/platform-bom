/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'hmangala' at '28/7/16 3:47 PM' with Gradle 2.14
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14/userguide/tutorial_java_projects.html
 */
buildscript {
	repositories {
		maven { url 'http://localhost:8880/archiva/repository/internal' }
		maven { url 'http://localhost:8880/archiva/repository/snapshots' }
	}
	dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.0'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1'
    }
}

description = "Platform BOM"

apply plugin: 'base'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'

def docsDir = 'src/reference/asciidoc' // Will be default with newer asciidoctor plugin

ext {
	linkHomepage = 'https://github.com/HarishM84/platform-bom'
	linkCi = 'http://localhost:7070/jenkins/view/All/job/platform-bom/'
	linkIssue = 'https://github.com/HarishM84/platform-bom/issues'
	linkScmUrl = 'https://github.com/HarishM84/platform-bom'
	linkScmConnection = 'https://github.com/HarishM84/platform-bom.git'
}

allprojects {
	group = 'com.platform.bom'
	repositories {
		maven { url 'http://localhost:8880/archiva/repository/internal' }
		maven { url 'http://localhost:8880/archiva/repository/snapshots' }
	}
	configurations.all {
		exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	}
}

subprojects { subproject ->

	apply plugin: 'java'
	apply from: "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'jacoco'
	apply plugin: 'checkstyle'
	
	compileJava {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		options.encoding = 'UTF-8'
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.encoding = 'UTF-8'
	}

	ext {
		assertjVersion = '3.4.1'
		jacksonVersion = '2.6.7'
		junitVersion = '4.12'
		log4jVersion = '1.2.17'
		mockitoVersion = '1.10.19'
		slf4jVersion = '1.7.21'
		springVersion = '4.2.7.RELEASE'
		hibernateValidatorVersion = "5.2.4.Final"
		springDataNeo4jVersion = '3.4.4.RELEASE'
		idPrefix = 'bom'
	}

	eclipse.project.natures += 'org.springframework.ide.eclipse.core.springnature'

	jacoco {
		toolVersion = "0.7.2.201409121644"
	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all,-options']

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		maxHeapSize = "1024m"
		jacoco {
			append = false
			destinationFile = file("$buildDir/jacoco.exec")
		}
	}

	checkstyle {
		configFile = new File(rootDir, "src/checkstyle/checkstyle.xml")
		toolVersion = "6.19"
	}

	jacocoTestReport {
		reports {
			xml.enabled false
			csv.enabled false
			html.destination "${buildDir}/reports/jacoco/html"
		}
	}

	build.dependsOn jacocoTestReport

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project ('platform-bom-base') {
	description = 'Platfrom BOM Base'

	dependencies {
    	testCompile "junit:junit:$junitVersion"
	}
}

project ('platform-bom-entity') {
	description = 'Platfrom BOM Entity'

	dependencies {
		compile project(':platform-bom-base')
		compile "org.springframework.data:spring-data-neo4j:$springDataNeo4jVersion"
		compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    	testCompile "junit:junit:$junitVersion"
	}
}


apply plugin: org.asciidoctor.gradle.AsciidoctorPlugin

asciidoctor {
	println docsDir
	sourceDir file("$docsDir")
	sourceDocumentNames = files("$docsDir/index.adoc") // Change in >= 1.5.1
	outputDir file("$buildDir/html")
	backends = ['html5', 'docbook']
	logDocuments = true
	options = [
		doctype: 'book',
		attributes: [
			docinfo: '',
			toc2: '',
			'compat-mode': '',
			imagesdir: '',
			stylesdir: "stylesheets/",
			stylesheet: 'golo.css',
			'platform-integration-version': "$version",
			'source-highlighter': 'highlightjs'
		]
	]
}


sonarqube {
	properties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'

	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}

	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
	destinationDir = new File(buildDir, "api")
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment."

	from('src/dist') {
		include 'changelog.txt'
	}

	from(api) {
		into 'api'
	}
}

task distZip(type: Zip, dependsOn: [docsZip]) { //, schemaZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) {
		into "${baseDir}/docs"
	}

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

/*
// Create an optional "with dependencies" distribution.
// Not published by default; only for use when building from source.
task depsZip(type: Zip, dependsOn: distZip) { zipTask ->
	group = 'Distribution'
	classifier = 'dist-with-deps'
	description = "Builds -${classifier} archive, containing everything " +
			"in the -${distZip.classifier} archive plus all dependencies."

	from zipTree(distZip.archivePath)

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.hasTask(":${zipTask.name}")) {
			def projectName = rootProject.name
			def artifacts = new HashSet()

			rootProject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
				def dependency = artifact.moduleVersion.id
				if (!projectName.equals(dependency.name)) {
					artifacts << artifact.file
				}
			}

			zipTask.from(artifacts) {
				into "${distZip.baseDir}/deps"
			}
		}
	}
}
*/

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs distribution archives.'
}


